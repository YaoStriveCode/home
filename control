#!/bin/sh
# Git based syncing for home data such as dot files

die() {
	echo $@ >&2
	exit 1
}

copy_list() {
	LIST=$1

	for ENT in $LIST; do
		DEST=
		case "$ENT" in
			dot/*)
				DEST=$TODIR/.${ENT##dot/}
				;;
			*)
				DEST=$TODIR/$ENT
			;;
		esac
		if [ -n "$ENT" ] && [ -n "$DEST" ]; then
			entdir=$(dirname $DEST)
			[ -d $entdir ] || mkdir -p $entdir || return 1
			cp -a $ENT $DEST >/dev/null || return 1
		fi
	done

	return 0
}

update_data() {
	TODIR=$1
	PROFILE=$2

	if [ -e $TODIR ]; then
		echo "Destination $TODIR already exists" >&2
		return 1
	fi

	if [ -n "$PROFILE" ]; then
		[ -f profiles/$PROFILE ] ||
			die "Invalid dot profile '$PROFILE'."
		MANIFEST=$(cat profiles/$PROFILE)
	else
		MANIFEST=$(find dot lib bin -maxdepth 1 -mindepth 1)
	fi

	mkdir -p $TODIR || return 1
	if ! copy_list "$MANIFEST"; then
		rm -rf $TODIR >/dev/null 2>&1
		return 1
	fi

	# Update control util
	[ -d $TODIR/bin ] || mkdir -p $TODIR/bin
	cp control $TODIR/bin/dotdatactl

	if [ -n "$PROFILE" ]; then
		echo $PROFILE > $TODIR/.dotdata_profile
	fi

	return 0
}

if [ -z $DOTDATADIR ]; then
	if [ -d .git ]; then
		export DOTDATADIR=$(pwd);
	elif [ -d $HOME/dotdata ]; then
		export DOTDATADIR=$HOME/dotdata
	fi
fi

[ -d $DOTDATADIR ] || \
	die "Could not determine data directory, set DOTDATADIR or execute from within"

cd $DOTDATADIR

# TODO ssh keys
case $1 in
	update)
		if [ -n "$2" ]; then
			DOT_PROFILE=$2
			[ -f profiles/$DOT_PROFILE ] ||
				die "Invalid dot profile '$DOT_PROFILE'."
		elif [ -f $HOME/.dotdata_profile ]; then
			DOT_PROFILE=$(cat $HOME/.dotdata_profile)
		fi

		TMPDIR=$HOME/.dotdata_update_$$
		if ! update_data $TMPDIR $DOT_PROFILE; then
			[ -d $TMPDIR ] && rm -rf $TMPDIR >/dev/null 2>&1
			exit 1
		fi
		rsync -a -q $TMPDIR/ $HOME
		;;
	export)
		OUT=$2
		PROFILE=$3

		[ -z $OUT ] && die "Usage $0 export <destination>"

		DESTDIR=

		case $OUT in
			*.tar|*.tar.*)
				DESTDIR=$(mktemp -d);
				if update_data $DESTDIR $PROFILE; then
					case ${OUT##*.} in
						tar)
							tar -C $DESTDIR -cf $OUT .
							;;
						gz)
							tar -C $DESTDIR -czf $OUT .
							;;
						bz2)
							tar -C $DESTDIR -cjf $OUT .
							;;
						*)
							die "Unrecognized output file type in $OUT"
							;;
					esac
				fi
				rm -rf $DESTDIR
				;;
			*)
				echo $OUT
				update_data $OUT $PROFILE || exit 1
				;;
		esac

		;;
	vimdiff)
		diffent() {
			ENT=$1
			DEST=$2
			SRC_HASH=$(md5sum $ENT | cut -d ' ' -f1)
			DEST_HASH=$(md5sum $DEST | cut -d ' ' -f1)
			if [ "$SRC_HASH" != "$DEST_HASH" ]; then
				vimdiff $ENT $DEST
			fi
		}

		# Dirs
		for dir in lib bin; do
			for ENT in $dir/*; do
				if [ -f $ENT ]; then
					diffent $ENT $HOME/$ENT
				fi
			done
		done

		# Dot Files
		for ENT in $(find dot -type f); do
			diffent $ENT $HOME/.$(echo $ENT | sed -e 's/^dot\///')
		done
		;;
	*)
		die "Missing action to $0"
		;;
esac
