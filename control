#!/bin/sh
# Git based syncing for home data such as dot files

die() {
	echo $@ >&2
	exit 1
}

copy_list() {
	LIST=$1

	for ENT in $LIST; do
		DEST=
		case "$ENT" in
			dot/*)
				DEST=$TODIR/.${ENT##dot/}
				;;
			*)
				DEST=$TODIR/$ENT
			;;
		esac
		if [ -n "$ENT" ] && [ -n "$DEST" ]; then
			entdir=$(dirname $DEST)
			[ -d $entdir ] || mkdir -p $entdir || return 1
			cp -a $ENT $DEST >/dev/null || return 1
			echo $DEST >> $TODIR/.list
		fi
	done

	find $(cat $TODIR/.list) -type f | \
		sed -e "s~$TODIR/~~" > \
		$TODIR/.dotdata_manifest

	rm -f $TODIR/.list

	return 0
}

checkout() {
	TODIR=$1
	PROFILE=$2

	if [ -e $TODIR ]; then
		echo "Destination $TODIR already exists" >&2
		return 1
	fi

	if [ "$PROFILE" = "default" ]; then
		PROFILE=
	fi

	if [ -n "$PROFILE" ]; then
		[ -f profiles/$PROFILE ] ||
			die "Invalid dot profile '$PROFILE'."
		MANIFEST=$(cat profiles/$PROFILE)
	else
		MANIFEST=$(find dot bin -maxdepth 1 -mindepth 1)
	fi

	mkdir -p $TODIR || return 1
	if ! copy_list "$MANIFEST"; then
		rm -rf $TODIR >/dev/null 2>&1
		return 1
	fi

	# Update control util
	[ -d $TODIR/bin ] || mkdir -p $TODIR/bin
	cp control $TODIR/bin/dotdatactl

	if [ -n "$PROFILE" ]; then
		echo $PROFILE > $TODIR/.dotdata_profile
	fi

	return 0
}

remote_push() {
	REMOTE=$1
	PROFILE=$2

	SSHOPT="-C"
	case $REMOTE in
		*@*)
			user=${REMOTE%@*}
			host=${REMOTE#*@}
			SSHOPT="$SSHOPT -l $user"
			;;
		*)
			user=
			host=$REMOTE
			;;
	esac

	REMOTECALL='test -d $HOME/bin || mkdir $HOME/bin >/dev/null 2>&1;'
	REMOTECALL=$REMOTECALL' cat >$HOME/bin/dotdatactl;'
	REMOTECALL=$REMOTECALL' chmod +x $HOME/bin/dotdatactl;'
	REMOTECALL=$REMOTECALL' echo $HOME/bin/dotdatactl'

	REMOTECALL=$(cat $0 | ssh $SSHOPT $host -- /bin/sh -c "$REMOTECALL")
	if [ -z "$REMOTECALL" ]; then
		echo "Failed to deploy remote control scirpt" >&2
		return 1
	fi
	REMOTECALL="ssh $SSHOPT $host $REMOTECALL"

	if [ -z "$PROFILE" ]; then
		PROFILE=$($REMOTECALL profile)
	fi

	DESTDIR=$(mktemp -u)
	if checkout $DESTDIR $PROFILE; then
		TARFILE=$(mktemp)
		tar -C $DESTDIR -c . > $TARFILE
		rm -rf $DESTDIR >/dev/null 2>&1
		cat $TARFILE | $REMOTECALL receive-tar
		rm -f $TARFILE
	else
		rm -rf $DESTDIR >/dev/null 2>&1
	fi
}

make_tar() {
	FILE=$1
	PROFILE=$2

	DESTDIR=$(mktemp -u);
	if checkout $DESTDIR $PROFILE; then
		case ${FILE##*.} in
			tar)
				tar -C $DESTDIR -cf $FILE .
				;;
			gz)
				tar -C $DESTDIR -czf $FILE .
				;;
			bz2)
				tar -C $DESTDIR -cjf $FILE .
				;;
			*)
				rm -rf $DESTDIR >/dev/null 2>&1
				die "Unrecognized output file type in $FILE"
				;;
		esac
	fi
	rm -rf $DESTDIR >/dev/null 2>&1
}

profile() {
	if [ -f $HOME/.dotdata_profile ]; then
		PROFILE=$(cat $HOME/.dotdata_profile)
	else
		PROFILE="default"
	fi

	if [ -z "$1" ]; then
		echo $PROFILE
	else
		NEW_PROFILE=$1
		if [ $NEW_PROFILE = "default" ]; then
			rm -f $HOME/.dotdata_profile
		else
			echo $NEW_PROFILE > $HOME/.dotdata_profile
		fi

		if [ "$PROFILE" != "$NEW_PROFILE" ]; then
			echo "Profile $PROFILE -> $NEW_PROFILE"
		fi
	fi
}

if [ -z $DOTDATADIR ]; then
	if [ -d .git ]; then
		export DOTDATADIR=$(pwd);
	elif [ -d $HOME/dotdata ]; then
		export DOTDATADIR=$HOME/dotdata
	fi
fi

[ -d $DOTDATADIR ] || \
	die "Could not determine data directory, set DOTDATADIR or execute from within"

cd $DOTDATADIR

# TODO ssh keys
case $1 in
	deploy)
		for r in $(cat remotes); do
			echo -n "$r: "
			if remote_push $r; then
				echo "done."
			else
				echo "fail."
			fi
		done
		;;
	profile)
		profile $2
		;;
	push)
		REMOTE=$2
		[ -z $REMOTE ] && die "Usage $0 push [user@]host [profile]"

		remote_push $REMOTE $3 || exit 1

		if ! grep $REMOTE remotes >/dev/null 2>&1; then
			{
				cat remotes;
				echo $REMOTE
			} | uniq | sort > remotes.new || \
				die "Failed to update remote list"
			mv remotes.new remotes
		fi
		;;
	pull)
		if [ -f $HOME/.dotdata_profile ]; then
			DOT_PROFILE=$(cat $HOME/.dotdata_profile)
		fi

		TMPDIR=$HOME/.dotdata_update_$$
		if ! checkout $TMPDIR $DOT_PROFILE; then
			[ -d $TMPDIR ] && rm -rf $TMPDIR >/dev/null 2>&1
			exit 1
		fi
		rsync --keep-dirlinks -r -E -v $TMPDIR/ $HOME
		;;
	receive-tar)
		TMPDIR=$HOME/.dotdata_update_$$
		mkdir $TMPDIR || die "Failed to create temporary directory"
		if ! tar -C $TMPDIR -x; then
			rm -rf $TMPDIR >/dev/null 2>&1
			die "Failed to unpack recieved tarball"
		fi
		if ! rsync -a -q $TMPDIR/ $HOME; then
			rm -rf $TMPDIR >/dev/null 2>&1
			die "Failed to integrat received tarball"
		fi
		rm -rf $TMPDIR >/dev/null 2>&1
		;;
	export)
		OUT=$2
		PROFILE=$3

		[ -z $OUT ] && die "Usage $0 export <destination>"

		DESTDIR=

		case $OUT in
			*.tar|*.tar.*)
				make_tar "$OUT" $PROFILE
				;;
			*)
				echo $OUT
				checkout $OUT $PROFILE || exit 1
				;;
		esac

		;;
	vimdiff)
		diffent() {
			ENT=$1
			DEST=$2
			SRC_HASH=$(md5sum $ENT | cut -d ' ' -f1)
			DEST_HASH=$(md5sum $DEST | cut -d ' ' -f1)
			if [ "$SRC_HASH" != "$DEST_HASH" ]; then
				vimdiff $ENT $DEST
			fi
		}

		# Dirs
		for ENT in $(find bin -type f); do
			diffent $ENT $HOME/$ENT
		done

		# Dot Files
		for ENT in $(find dot -type f -a -not -name .gitignore); do
			diffent $ENT ~/.${ENT#dot/}
		done
		;;
	*)
		die "Missing action to $0"
		;;
esac
