#!/usr/bin/python

from __future__ import division

import sys
import os
import re
from subprocess import *

NOT_RUNNING=1
RUNNING=2
ALREADY_RUNNING=3

def start(host):
	(status, pid)=check(host)
	if status == RUNNING:
		return (ALREADY_RUNNING, pid)
	else:
		check_call(['ssh', '-MNf', host])
		return check(host)

def stop(host):
	(status, pid)=check(host)
	if status == RUNNING:
		check_call(['ssh', '-O', 'exit', host])

def check(host):
	ssh=Popen(['ssh', '-O', 'check', host], stderr=PIPE)
	o = ssh.communicate()[1]
	o = re.split('\r?\n', o)[0]

	if ssh.returncode != 0:
		if o == 'No ControlPath specified for "-O" command':
			raise Exception('ControlPath not configured for host(%s)' % host)
		m = re.match('^Control socket connect\((.+?)\): (.+)$', o)
		if not m:
			raise Exception('Unrecognized output from ssh subprocess', o)
		(master, error)=m.group(1, 2)
		if error == 'Connection refused':
			print >> sys.stderr, 'Removed stale socket(%s)' % master
			os.remove(master)
		return (NOT_RUNNING, None)
	else:
		m = re.match('^Master running \(pid=(\d+)\)', o)
		if not m:
			raise Exception('Unrecognized output from ssh subprocess', o)
		return (RUNNING, int(m.group(1)))

def syntax():
	print >> sys.stderr, 'Syntax', os.path.basename(sys.argv[0]), '<host> [start|restart|stop|status]'
	sys.exit(2)

def main():
	if len(sys.argv) < 2:
		syntax()

	host=sys.argv[1]

	if len(sys.argv) > 2:
		cmd=sys.argv[2]
	else:
		cmd='start'

	if cmd == 'start':
		(status, pid)=start(host)
		if status == RUNNING:
			print "Started (pid=%s)" % pid
		elif status == ALREADY_RUNNING:
			print "Already running (pid=%s)" % pid
		else:
			print "Failed to start, check log"
			return 1
	elif cmd == 'restart':
		stop(host)
		(status, pid)=start(host)
		if status == RUNNING:
			print "Restarted (pid=%s)" % pid
		elif status == ALREADY_RUNNING:
			print "Already running (pid=%s)" % pid
		else:
			print "Failed to start, check log"
			return 1
	elif cmd == 'stop':
		stop(host)
	elif cmd == 'status':
		(status, pid)=check(host)
		if status == RUNNING:
			print 'Running (pid=%s)' % pid
		else:
			print "Not running"
			return 1
	else:
		syntax()

	return 0

sys.exit(main())
