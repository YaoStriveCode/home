#!/bin/bash

if [ $# -eq 0 ]; then
    set -- -h
fi
OPTIONS_SPEC="\
git shell-pack make <remote> [<ref> [<ref> [...]]]
git shell-pack ack  <remote>

'make' builds a self-extracting pack file for the remote.  If no refs are
       given, then all matching refs for the remote are exported.  The shell
       script is output on stdout.  The refs packed are recorded in
       refs/remotes/for/<remote>/* for:

'ack' acknowledges reception of a pack by updating refs/remotes/* with the
      revisions recorded by 'make' in refs/remotes/for/<remote>/*.
--
h,help        show the help
"

. "$(git --exec-path)/git-sh-setup"

while [ $# -gt 0 ]; do
    opt="$1"
    shift
    case "$opt" in
        --) break ;;
        *) die "Unexpected option: $opt" ;;
    esac
done

set -e

make_pack()
{
    footer=$(mktemp)
    revlist=$(mktemp)

    for ref in $refs; do
        src=$(git rev-parse $ref) || die "Invalid rev $ref"
        if from=$(git rev-parse $remote/$ref 2>/dev/null); then
            git rev-list $from..$src >>$revlist
        else
            git rev-list $src >>$revlist
        fi
        git update-ref -m 'Prepared Pack' refs/remotes/for/$remote/$ref $src

        echo "git update-ref -m 'Pack import' refs/remotes/\$remote/$ref $src" >> $footer
    done

    cat <<EOSCRIPT
#!/bin/sh
set -x

if [ \$# -lt 1 ]; then
    echo "Usage \$0 <remote>"
    echo
    echo "Imports the encapsulated packed objects and updates the shipped refs"
    echo "under the given remote."
    exit 1
fi

remote=\$1

base64 -d <<EOPACK | git unpack-objects
$(sort -u $revlist | git pack-objects --revs --stdout --all-progress | base64)
EOPACK

$(cat $footer)
EOSCRIPT

    rm $footer $revlist
}

[ $# -eq 0 ] && die 'Missing command argument'
command=$1
shift

[ $# -eq 0 ] && die 'Missing remote argument'
remote=$1
shift

case "$command" in
make)
    if [ $# -eq 0 ]; then
        refs=$(ls .git/refs/remotes/$remote)
    else
        refs=$@
    fi

    make_pack
    ;;
ack)
    git for-each-ref "refs/remotes/for/$remote/*" | while read rev type forref; do
        ref=${forref##*/}
        git update-ref -m 'Acked pack' refs/remotes/$remote/$ref $rev
        git update-ref -d $forref $rev
        echo "Acked $remote/$ref $rev"
    done
    ;;
*) die "Invalid command: $command" ;;
esac
